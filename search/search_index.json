{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RTechDocs","text":"<p>Selamat datang di RTechDocs \ud83d\udc4b</p> <p>Dokumentasi teknis mengenai:</p> <ul> <li>Servers &amp; Operating Systems</li> <li>IT Management Applications &amp; Tools</li> <li>Networking &amp; Mikrotik</li> <li>Virtualization</li> </ul> <p>Gunakan sidebar/tab untuk navigasi.</p> <p>Cara Menggunakan</p> <p>Klik kategori di sidebar untuk membuka dokumentasi terkait.</p>"},{"location":"it-management/glpi-install-ubuntu-22-04/","title":"GLPI Install in Ubuntu 22.04","text":"<p>You can find these steps on the official GLPI website. Please check the following link: Install GLPI on Ubuntu</p> <p>For this installation, we need</p> <ul> <li> <p>A Linux Ubuntu Server 22.04 LTS</p> </li> <li> <p>A Web server - Apache</p> </li> <li> <p>A code interpreter - PHP</p> </li> <li> <p>A Data Base Server Management Platform - MariaDB in this case</p> </li> </ul> <p>We are separating this process in 6 steps:</p> <ol> <li> <p>Installing components</p> </li> <li> <p>Database configuration</p> </li> <li> <p>Preparing files and folders to install GLPI</p> </li> <li> <p>Giving correct folder and files permission on linux to install GLPI</p> </li> <li> <p>Configuring web server and PHP</p> </li> <li> <p>Starting web installation</p> </li> </ol>"},{"location":"it-management/glpi-install-ubuntu-22-04/#1-installing-the-components","title":"1 - Installing the components","text":"<p>Before we start, make sure your server is up to date</p> <pre><code>apt update &amp;&amp; apt upgrade\n</code></pre> <p>For this post, we are using Apache 2, MariaDB Server, PHP and its respective extensions. If your operating system and repositories are updated, the latest stable version of the extensions are already the ones downloaded.</p> <pre><code>apt install -y apache2 php php-{apcu,cli,common,curl,gd,imap,ldap,mysql,xmlrpc,xml,mbstring,bcmath,intl,zip,redis,bz2} libapache2-mod-php php-soap php-cas\napt install -y mariadb-server\n</code></pre> <ul> <li>After all the components are installed, we need to follow the steps 2 - 6.</li> </ul>"},{"location":"it-management/glpi-install-ubuntu-22-04/#2-database-configuration","title":"2 - Database Configuration","text":"<p>MariaDB, by default is provided without a default password set to the root user and with some default settings that need to be correctly configured.</p>"},{"location":"it-management/glpi-install-ubuntu-22-04/#secure-mariadb-installation","title":"Secure MariaDB Installation","text":"<pre><code>mysql_secure_installation\n</code></pre> <p>Minimum recommendation</p> <ul> <li> <p>Change the root password</p> </li> <li> <p>Remove anonymous users</p> </li> <li> <p>Disallow root login remotely</p> </li> <li> <p>Remove test database</p> </li> <li> <p>Reload privilege tables</p> </li> </ul> <p>Furthermore, since GLPI is a global ITSM tool which may be used by people from all around the world at the same time, you would like to activate the possibility to GLPI database service user to read timezone information from your default mysql database.</p> <pre><code>mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql mysql\n</code></pre>"},{"location":"it-management/glpi-install-ubuntu-22-04/#create-a-user-and-database-dedicated-to-glpi","title":"Create a user and database dedicated to GLPI","text":"<pre><code>mysql -uroot -pmysql\nCREATE DATABASE glpi;\nCREATE USER 'glpi'@'localhost' IDENTIFIED BY 'yourstrongpassword';\nGRANT ALL PRIVILEGES ON glpi.* TO 'glpi'@'localhost';\nGRANT SELECT ON `mysql`.`time_zone_name` TO 'glpi'@'localhost';\nFLUSH PRIVILEGES;\n</code></pre>"},{"location":"it-management/glpi-install-ubuntu-22-04/#3-preparing-files-to-install-glpi","title":"3 - Preparing files to Install GLPI","text":"<p>After you installed the components and created a first database and service user to receive GLPI folders, you will download the *.tgz latest version of GLPI and store it on apache main root folder.</p> <p>You may always find the latest stable release on https://glpi-project.org/download</p> <pre><code>cd /var/www/html\nwget https://github.com/glpi-project/glpi/releases/download/10.0.19/glpi-10.0.19.tgz\ntar -xvzf glpi-10.0.19.tgz\n</code></pre>"},{"location":"it-management/glpi-install-ubuntu-22-04/#filesystem-hierarchy-standard-breakdown","title":"Filesystem Hierarchy Standard Breakdown","text":"<p>In this scenario we are storing GLPI information in different folders and following the FHS where, usually.</p> <ul> <li> <p>/etc/glpi : for the files of configuration of GLPI (config_db.php, config_db_slave.php) ;</p> </li> <li> <p>/var/www/html/glpi : for the source code of GLPI (in reading only), served by Apache;</p> </li> <li> <p>/var/lib/glpi : for the variable files of GLPI (session, uploaded documents, cache, cron, plugins, \u2026);</p> </li> <li> <p>/var/log/glpi : for the log files of GLPI.</p> </li> </ul> <p>To make sure GLPI will find those files, we need to indicate in two different files where these folders are on the system:</p>"},{"location":"it-management/glpi-install-ubuntu-22-04/#the-downstream-file","title":"The Downstream file","text":"<p>The <code>downstream.php</code> file is responsible for instructing GLPI application where the <code>GLPI_CONFIG_DIR</code> - the configuration directory of GLPI - is stored. Remember, we must indicate <code>/etc/glpi</code> as the new folder for configuration files. GLPI understands that a file called <code>downstream.php</code> inside the <code>inc</code> folder has these instructions.</p> <ul> <li>Create the <code>downstream.php</code> file</li> </ul> <pre><code>vim /var/www/html/glpi/inc/downstream.php\n</code></pre> <ul> <li>Declare the new config file folder - you can insert this content in this file you have created</li> </ul> <pre><code>&lt;?php\ndefine('GLPI_CONFIG_DIR', '/etc/glpi/');\nif (file_exists(GLPI_CONFIG_DIR . '/local_define.php')) {\nrequire_once GLPI_CONFIG_DIR . '/local_define.php';\n}\n</code></pre> <ul> <li>Now you may move the folders from its current directory to the new directories:</li> </ul> <pre><code>mv /var/www/html/glpi/config /etc/glpi\nmv /var/www/html/glpi/files /var/lib/glpi\nmv /var/lib/glpi/_log /var/log/glpi\n</code></pre> <p>After you declare the new <code>GLPI_CONFIG_DIR</code> with the <code>downstream.php</code>, navigate to this new directory <code>/etc/glpi</code> and create a new file called local_define.php. This file is reponsible for instructing GLPI where the other directories are stored.</p> <p>We are changing the documents folder ( <code>files</code> ) and the logs folder ( <code>files/_log</code> ) to their new directory.</p> <ul> <li>Create the <code>local_define.php</code> file</li> </ul> <pre><code>vim /etc/glpi/local_define.php\n</code></pre> <ul> <li>Paste the following in this file</li> </ul> <pre><code>&lt;?php\ndefine('GLPI_VAR_DIR', '/var/lib/glpi');\ndefine('GLPI_DOC_DIR', GLPI_VAR_DIR);\ndefine('GLPI_CACHE_DIR', GLPI_VAR_DIR . '/_cache');\ndefine('GLPI_CRON_DIR', GLPI_VAR_DIR . '/_cron');\ndefine('GLPI_GRAPH_DIR', GLPI_VAR_DIR . '/_graphs');\ndefine('GLPI_LOCAL_I18N_DIR', GLPI_VAR_DIR . '/_locales');\ndefine('GLPI_LOCK_DIR', GLPI_VAR_DIR . '/_lock');\ndefine('GLPI_PICTURE_DIR', GLPI_VAR_DIR . '/_pictures');\ndefine('GLPI_PLUGIN_DOC_DIR', GLPI_VAR_DIR . '/_plugins');\ndefine('GLPI_RSS_DIR', GLPI_VAR_DIR . '/_rss');\ndefine('GLPI_SESSION_DIR', GLPI_VAR_DIR . '/_sessions');\ndefine('GLPI_TMP_DIR', GLPI_VAR_DIR . '/_tmp');\ndefine('GLPI_UPLOAD_DIR', GLPI_VAR_DIR . '/_uploads');\ndefine('GLPI_INVENTORY_DIR', GLPI_VAR_DIR . '/_inventories');\ndefine('GLPI_THEMES_DIR', GLPI_VAR_DIR . '/_themes');\ndefine('GLPI_LOG_DIR', '/var/log/glpi');\n</code></pre>"},{"location":"it-management/glpi-install-ubuntu-22-04/#4-folder-and-file-permissions","title":"4 - Folder and File Permissions","text":"<p>Here is a suggestion of permissions for your GLPI installation</p> <pre><code>chown root:root /var/www/html/glpi/ -R\nchown www-data:www-data /etc/glpi -R\nchown www-data:www-data /var/lib/glpi -R\nchown www-data:www-data /var/log/glpi -R\nchown www-data:www-data /var/www/html/glpi/marketplace -Rf\nfind /var/www/html/glpi/ -type f -exec chmod 0644 {} \\;\nfind /var/www/html/glpi/ -type d -exec chmod 0755 {} \\;\nfind /etc/glpi -type f -exec chmod 0644 {} \\;\nfind /etc/glpi -type d -exec chmod 0755 {} \\;\nfind /var/lib/glpi -type f -exec chmod 0644 {} \\;\nfind /var/lib/glpi -type d -exec chmod 0755 {} \\;\nfind /var/log/glpi -type f -exec chmod 0644 {} \\;\nfind /var/log/glpi -type d -exec chmod 0755 {} \\;\n</code></pre>"},{"location":"it-management/glpi-install-ubuntu-22-04/#5-configure-the-web-server","title":"5 - Configure the Web Server","text":"<p>For GLPI to run smoothly, without the need of complex URLs, we recomend you use a DNS name for your server and create a Virtual Host to forward all the requests coming to your instance looking for this previously created DNS entry to the correct path in your Apache configuration. More information about web server configuration can be found here</p>"},{"location":"it-management/glpi-install-ubuntu-22-04/#how-to-create-a-virtualhost-dedicated-to-glpi","title":"How to create a VirtualHost dedicated to GLPI?","text":"<ul> <li>Create a file on <code>/etc/apache2/sites-available/glpi.conf</code></li> </ul> <pre><code>/etc/apache2/sites-available/glpi.conf\n</code></pre> <p>If you need, you can change the file name to your webserver standards.</p> <ul> <li>In this file, you will add the following content:</li> </ul> <pre><code># Start of the VirtualHost configuration for port 80\n\n&lt;VirtualHost *:80&gt;\n    ServerName yourglpi.yourdomain.com\n    # Specify the server's hostname\n    DocumentRoot /var/www/html/glpi/public\n    # The directory where the website's files are located\n    # Start of a Directory directive for the website's directory\n    &lt;Directory /var/www/html/glpi/public&gt;\n        Require all granted\n        # Allow all access to this directory\n        RewriteEngine On\n        # Enable the Apache rewrite engine\n        # Ensure authorization headers are passed to PHP.\n        # Some Apache configurations may filter them and break usage of API, CalDAV, ...\n        RewriteCond %{HTTP:Authorization} ^(.+)$\n        RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n        # Redirect all requests to GLPI router, unless the file exists.\n        RewriteCond %{REQUEST_FILENAME} !-f\n        RewriteRule ^(.*)$ index.php [QSA,L]\n    &lt;/Directory&gt;\n    # End of the Directory directive for /var/www/glpi/public\n&lt;/VirtualHost&gt;\n\n# End of the VirtualHost configuration for port 80\n</code></pre> <p>The variables can be changed to your standards, file locations or folder names</p> <ul> <li> <p>ServerName if you have a public URL, you can type it here</p> </li> <li> <p>DocumentRoot if you will store GLPI in a different page, change it too.</p> </li> </ul> <p>After the Virtual Host file is created you should disable the default apache site configuration, enable the rewrite module and reload the new vhost file.</p> <p><code>a2dissite 000-default.conf</code> # Disable default apache site <code>a2enmod rewrite</code> # enable the rewrite module <code>a2ensite glpi.conf</code> # enable the new apache virtual host settings for your glpi instance <code>systemctl restart apache2</code></p>"},{"location":"it-management/glpi-install-ubuntu-22-04/#set-up-the-phpini-file","title":"Set up the PHP.ini file","text":"<p>We recommend to use always the latest supported PHP release for better performance.</p> <p>For GLPI to work properly it is recommended to change the following parameters on your php.ini file</p> <ul> <li>Open the php.ini file</li> </ul> <pre><code>vim /etc/php/8.1/apache2/php.ini\n</code></pre> <p>Change the following parameters</p> <ul> <li> <p><code>upload_max_filesize = 20M</code> Maximum size for uploaded files is set to 20 megabytes.</p> </li> <li> <p><code>post_max_size = 20M</code> Maximum size for POST data (e.g., form submissions) is also set to 20 megabytes.</p> </li> <li> <p><code>max_execution_time = 60</code> Maximum execution time for a PHP script is set to 60 seconds.</p> </li> <li> <p><code>max_input_vars = 5000</code> Maximum number of input variables (e.g., form fields) a script can accept is 5000.</p> </li> <li> <p><code>memory_limit = 256M</code> The maximum amount of memory a single PHP script can use is 256 megabytes.</p> </li> <li> <p><code>session.cookie_httponly = On</code> Sets the \"HttpOnly\" attribute for session cookies</p> </li> <li> <p><code>date.timezone = America/Sao_Paulo</code> Sets the default timezone for PHP to yours.</p> </li> </ul> <p>To add your timezone, please refer to the official list of supported timezones for PHP</p>"},{"location":"it-management/glpi-install-ubuntu-22-04/#6-start-web-installation","title":"6 - Start Web Installation","text":"<p>Once the installation and configuration of dependencies are done, the installation can continue on a web browser with access to this same server. Open a Web browser and type the DNS record you have created for this server.</p>"},{"location":"servers-os/centos7-eol-repos/","title":"Fix-Repository-Issues-CentOS-7-EOL","text":"<p>How to Fix Repository Issues on CentOS 7 After End-of-Life (EOL)</p>"},{"location":"servers-os/centos7-eol-repos/#introduction","title":"Introduction","text":"<p>If you're using a minimal installation of CentOS 7, you might face issues when trying to install or update packages. This happens because the default CentOS 7 repositories are no longer supported.</p> <p>The solution is to use the CentOS Vault Repository at <code>http://vault.centos.org</code>. This repository contains older versions of CentOS, including the last release of CentOS 7 (<code>7.9.2009</code>).</p> <p>This guide will show you how to configure the repository for a minimal CentOS 7 installation and ensure that you can update and install essential tools like <code>nano</code>, <code>wget</code>, or <code>vim</code>.</p>"},{"location":"servers-os/centos7-eol-repos/#steps-to-configure-the-repository","title":"Steps to Configure the Repository","text":""},{"location":"servers-os/centos7-eol-repos/#1-check-your-centos-version","title":"1. Check Your CentOS Version","text":"<p>First, verify that your CentOS version is <code>7.9.2009</code>. You can check the version with the following command:</p> <pre><code>cat /etc/redhat-release\n</code></pre> <p>If it shows something like CentOS Linux release 7.9.2009, you can proceed with the configuration.</p>"},{"location":"servers-os/centos7-eol-repos/#2-backup-the-default-repository-configuration","title":"2. Backup the Default Repository Configuration","text":"<p>Before making any changes, it's important to back up the current repository configuration file. This will allow you to restore it if necessary.</p> <p>Run the following command to create a backup of the repository file:</p> <pre><code>cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n</code></pre>"},{"location":"servers-os/centos7-eol-repos/#3-add-the-centos-vault-repository","title":"3. Add the CentOS Vault Repository","text":"<p>Now, you will create a new .repo file for the CentOS Vault repository. Since you are using a minimal installation, you can use the vi editor (or nano if it's available) to create this new repository file.</p> <p>Run the following command:</p> <pre><code>vi /etc/yum.repos.d/CentOS-Vault.repo\n</code></pre> <p>Then, add the following content to the file:</p> <pre><code># /etc/yum.repos.d/CentOS-Vault.repo\n\n[base]\nname=CentOS-7.9.2009 - Base\nbaseurl=http://vault.centos.org/7.9.2009/os/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n[updates]\nname=CentOS-7.9.2009 - Updates\nbaseurl=http://vault.centos.org/7.9.2009/updates/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n[extras]\nname=CentOS-7.9.2009 - Extras\nbaseurl=http://vault.centos.org/7.9.2009/extras/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n\n[centosplus]\nname=CentOS-7.9.2009 - Plus\nbaseurl=http://vault.centos.org/7.9.2009/centosplus/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7\n</code></pre> <p>After adding the content, save and exit the file <code>(esc -&gt; :wq -&gt; enter)</code> in vi.</p>"},{"location":"servers-os/centos7-eol-repos/#4-clean-the-yum-cache","title":"4. Clean the YUM Cache","text":"<p>After adding the new repository configuration, clean the YUM cache to ensure the new repository settings are applied correctly:</p> <pre><code>yum clean all\n</code></pre>"},{"location":"servers-os/centos7-eol-repos/#5-run-yum-update","title":"5. Run <code>yum update</code>","text":"<p>Once you have configured the new repository, it is important to update your system to ensure that you have the latest packages available from the CentOS Vault repository.</p> <p>Run the following command to update all installed packages:</p> <pre><code>yum update -y\n</code></pre> <p>This will:</p> <ul> <li>Check for updates for all installed packages.</li> <li>Download and install any available updates, ensuring your system is up to date with the latest patches.</li> </ul>"},{"location":"servers-os/centos7-eol-repos/#6-test-the-configuration","title":"6. Test the Configuration","text":"<p>Now, check that the repositories are set up correctly by running:</p> <pre><code>yum repolist\n</code></pre> <p>You should see the <code>base</code>, <code>updates</code>, and <code>extras</code> repositories listed, all pointing to <code>vault.centos.org</code>.</p>"},{"location":"servers-os/centos7-eol-repos/#7-install-essential-tools","title":"7. Install Essential Tools","text":"<p>Since this is a minimal installation, you may not have tools like nano or wget. You can install them using the following command:</p> <pre><code>yum install nano wget -y\n</code></pre>"},{"location":"servers-os/centos7-eol-repos/#8-enable-additional-repositories-optional","title":"8. Enable Additional Repositories (Optional)","text":"<p>If you need additional repositories like <code>centosplus</code>, you can enable them by setting <code>enabled=1</code> in the configuration file.</p>"},{"location":"servers-os/centos7-eol-repos/#tips-and-notes","title":"Tips and Notes","text":"<ul> <li>Always ensure you are pointing to <code>7.9.2009</code>, as it is the last supported version of <code>CentOS 7</code>.</li> <li>If you need other repositories, enable them by modifying <code>enabled=0</code> to <code>enabled=1</code> in the <code>.repo</code> file.</li> <li>Minimal installations often require extra dependencies. Use <code>yum</code> to install additional packages as needed.</li> </ul>"},{"location":"servers-os/centos7-eol-repos/#conclusion","title":"Conclusion","text":"<p>By following these steps, you will be able to continue using CentOS 7 with the CentOS Vault repository, even though official support has ended. This configuration will allow you to install and update packages without issues.</p>"},{"location":"servers-os/ubuntu-static-ip-netplan/","title":"Configure Static IP on Ubuntu using Netplan","text":"<p>Netplan is the default network configuration tool in Ubuntu (from 17.10 onwards). It uses YAML-based configuration files to configure networking.</p> <p>This guide explains how to configure a static IP address on Ubuntu using Netplan.</p>"},{"location":"servers-os/ubuntu-static-ip-netplan/#step-1-identify-network-interface","title":"Step 1: Identify Network Interface","text":"<p>First, list all network interfaces:</p> <pre><code>ip link show\n</code></pre> <p>Example output:</p> <pre><code>2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000\n</code></pre> <p>In this case, the interface is <code>ens33</code>.</p>"},{"location":"servers-os/ubuntu-static-ip-netplan/#step-2-backup-current-netplan-configuration","title":"Step 2: Backup Current Netplan Configuration","text":"<p>Netplan configs are stored in <code>/etc/netplan/</code>. Backup the existing configuration file:</p> <pre><code>sudo cp /etc/netplan/01-netcfg.yaml /etc/netplan/01-netcfg.yaml.bak\n</code></pre>"},{"location":"servers-os/ubuntu-static-ip-netplan/#step-3-edit-netplan-configuration","title":"Step 3: Edit Netplan Configuration","text":"<p>Open the config file:</p> <pre><code>sudo nano /etc/netplan/01-netcfg.yaml\n</code></pre> <p>Example static IP configuration:</p> <pre><code>network:\n  version: 2\n  renderer: networkd\n  ethernets:\n    ens33:\n      dhcp4: no\n      addresses:\n        - 192.168.1.100/24\n      gateway4: 192.168.1.1\n      nameservers:\n        addresses:\n          - 8.8.8.8\n          - 1.1.1.1\n</code></pre> <ul> <li><code>ens33</code> \u2192 Replace with your interface name.</li> <li><code>192.168.1.100/24</code> \u2192 Desired static IP and subnet.</li> <li><code>192.168.1.1</code> \u2192 Gateway address.</li> <li><code>8.8.8.8, 1.1.1.1</code> \u2192 DNS servers.</li> </ul>"},{"location":"servers-os/ubuntu-static-ip-netplan/#step-4-apply-changes","title":"Step 4: Apply Changes","text":"<p>After saving the file, apply configuration:</p> <pre><code>sudo netplan apply\n</code></pre>"},{"location":"servers-os/ubuntu-static-ip-netplan/#step-5-verify-configuration","title":"Step 5: Verify Configuration","text":"<p>Check assigned IP:</p> <pre><code>ip addr show ens33\n</code></pre> <p>Test internet connectivity:</p> <pre><code>ping -c 4 google.com\n</code></pre>"},{"location":"servers-os/ubuntu-static-ip-netplan/#step-6-troubleshooting","title":"Step 6: Troubleshooting","text":"<p>If the connection fails, try:</p> <pre><code>sudo netplan try\n</code></pre> <p>This allows rollback if configuration is invalid.</p> <p>\u2705 Your Ubuntu server now has a static IP configured using Netplan!</p>"}]}